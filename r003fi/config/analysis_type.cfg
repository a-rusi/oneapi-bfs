<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%FPGAInteractionAtypeName</name>
  <shortName>%FPGAInteractionAtypeShortName</shortName>
  <description>%FPGAInteractionAtypeDescription</description>
  <shortDescription>%FPGAInteractionAtypeShortDescription</shortDescription>
  <abbreviation>fi</abbreviation>
  <alias>fpga-interaction</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <iconClass>gpu light</iconClass>
  <property name="helpId">intel.phe.configs.cpu_fpga_interaction</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=group_generic')"/>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%FPGAInteractionViewpointName</defaultValue>
  </stringKnob>
  <xsl:variable name="commonKnobs" select="document('config://analysis_type/include/knobs.xsl')"/>
  <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='samplingInterval']"/>
  <booleanKnob id="enableStackCollect" displayName="%EnableStackCollection" cliName="enable-stack-collection">
   <xsl:if test="not(exsl:is_experimental('sep-lbr')) and exsl:ctx('targetOS', '') = 'MacOSX'">
    <xsl:attribute name="boolean:visible">false</xsl:attribute>
   </xsl:if>
   <description>%EnableStackCollectionDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
  </booleanKnob>
  <enumKnob id="fpgaProfilingDataSource" displayName="%FpgaProfilingDataSource" cliName="profiling-source">
   <description>%FpgaProfilingDataSourceDescription</description>
   <values>
    <value displayName="%AOCLProfiler" cliName="aocl-profiler">aocl-profiler</value>
    <value displayName="%OpenCLProfiling" cliName="ocl-profiling-api">ocl-profiling-api</value>
    <defaultValue>aocl-profiler</defaultValue>
   </values>
  </enumKnob>
  <stringKnob id="fpgaSourceFileAT" displayName="%FpgaSourceFile" cliName="source-file" boolean:visible="false">
   <description>%FpgaSourceFileDescription</description>
   <defaultValue/>
   <knobProperty name="active_state">fpgaProfilingDataSource=aocl-profiler</knobProperty>
  </stringKnob>
  <stringKnob id="fpgaAocxOrBinaryFileAT" displayName="%FpgaAocxOrBinaryFile" cliName="binary-aocx-file">
   <description>%FpgaAocxOrBinaryFileDescription</description>
   <defaultValue/>
   <knobProperty name="active_state">fpgaProfilingDataSource=aocl-profiler</knobProperty>
  </stringKnob>
  <intKnob id="fpgaPeriodAT" displayName="%FpgaPeriod" cliName="period">
   <description>%FpgaPeriodDescription</description>
   <int:min>0</int:min>
   <int:defaultValue>0</int:defaultValue>
   <knobProperty name="active_state">fpgaProfilingDataSource=aocl-profiler</knobProperty>
  </intKnob>
  <booleanKnob id="fpgaNoTemporalAT" displayName="%FpgaNoTemporal" cliName="no-temporal">
   <description>%FpgaNoTemporalDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
   <knobProperty name="active_state">fpgaProfilingDataSource=aocl-profiler</knobProperty>
  </booleanKnob>
  <booleanKnob id="fpgaNoMemTransfersAT" displayName="%FpgaNoMemTransfers" cliName="no-mem-transfers">
   <description>%FpgaNoMemTransfersDescription</description>
   <boolean:defaultValue>false</boolean:defaultValue>
   <knobProperty name="active_state">fpgaProfilingDataSource=aocl-profiler</knobProperty>
  </booleanKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="isPerfDRAMBWAvailable" select="$pmuCommon//variables/isPerfBWAvailable"/>
  <xsl:variable name="isPerfIOBWAvailable" select="$pmuCommon//variables/isPerfIOBWAvailable"/>
  <collector id="runsa">
   <xsl:if test="exsl:ctx('targetOS')='Windows' or exsl:ctx('isCSwitchAvailable', '')='yes'">
    <boolean:collectorKnob knob="systemWideContextSwitch">true</boolean:collectorKnob>
   </xsl:if>
   <xsl:choose>
    <xsl:when test="exsl:ctx('fpgaProfilingDataSource', 'ocl-profiling-api')='aocl-profiler'">
     <boolean:collectorKnob knob="useAOCLProfile">true</boolean:collectorKnob>
     <collectorKnob knob="fpgaSourceFile">
      <xsl:value-of select="exsl:ctx('fpgaSourceFileAT', '')"/>
     </collectorKnob>
     <collectorKnob knob="fpgaAocxOrBinaryFile">
      <xsl:value-of select="exsl:ctx('fpgaAocxOrBinaryFileAT', '')"/>
     </collectorKnob>
     <collectorKnob knob="fpgaPeriod">
      <xsl:value-of select="exsl:ctx('fpgaPeriodAT', 0)"/>
     </collectorKnob>
     <collectorKnob knob="fpgaNoTemporal">
      <xsl:value-of select="exsl:ctx('fpgaNoTemporalAT', 0)"/>
     </collectorKnob>
     <collectorKnob knob="fpgaNoMemTransfers">
      <xsl:value-of select="exsl:ctx('fpgaNoMemTransfersAT', 0)"/>
     </collectorKnob>
    </xsl:when>
    <xsl:when test="exsl:ctx('fpgaProfilingDataSource', 'ocl-profiling-api')='ocl-profiling-api'">
     <boolean:collectorKnob knob="collectFPGAOpenCl">true</boolean:collectorKnob>
    </xsl:when>
   </xsl:choose>
   <xsl:choose>
    <xsl:when test="exsl:ctx('isVTSSPPDriverAvailable', 0) and exsl:ctx('enableStackCollect', 0)">
     <collectorKnob knob="usePerf">true</collectorKnob>
     <xsl:choose>
      <xsl:when test="$isPerfDRAMBWAvailable = 'false' and $isPerfIOBWAvailable = 'false'">
       <xsl:value-of select="exsl:warning(string('%PCIeDRAMBandwidthUnavailableStack'))"/>
      </xsl:when>
      <xsl:when test="$isPerfDRAMBWAvailable = 'true' and $isPerfIOBWAvailable = 'false'">
       <xsl:value-of select="exsl:warning(string('%PCIeBandwidthUnavailableStack'))"/>
       <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
      </xsl:when>
      <xsl:when test="$isPerfDRAMBWAvailable = 'false' and $isPerfIOBWAvailable = 'true'">
       <xsl:value-of select="exsl:warning(string('%DRAMBandwidthUnavailableStack'))"/>
       <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
       <collectorKnob knob="restrictPCIeBandwidthByClass">0x12</collectorKnob>
       <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
      </xsl:when>
      <xsl:when test="$isPerfDRAMBWAvailable = 'true' and $isPerfIOBWAvailable = 'true'">
       <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
       <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
       <collectorKnob knob="restrictPCIeBandwidthByClass">0x12</collectorKnob>
       <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
      </xsl:when>
     </xsl:choose>
    </xsl:when>
    <xsl:when test="not(exsl:ctx('isSEPDriverAvailable', 0))">
     <xsl:choose>
      <xsl:when test="exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='Kernel' or exsl:ctx('LinuxPerfCredentials', 'NotAvailable')='User'">
       <xsl:value-of select="exsl:warning(string('%BandwidthPerfSystemWideNoPerm'))"/>
      </xsl:when>
      <xsl:otherwise>
       <xsl:choose>
        <xsl:when test="$isPerfDRAMBWAvailable = 'false' and $isPerfIOBWAvailable = 'false'">
         <xsl:value-of select="exsl:warning(string('%PCIeDRAMBandwidthUnavailable'))"/>
        </xsl:when>
        <xsl:when test="$isPerfDRAMBWAvailable = 'true' and $isPerfIOBWAvailable = 'false'">
         <xsl:value-of select="exsl:warning(string('%PCIeBandwidthUnavailable'))"/>
         <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
        </xsl:when>
        <xsl:when test="$isPerfDRAMBWAvailable = 'false' and $isPerfIOBWAvailable = 'true'">
         <xsl:value-of select="exsl:warning(string('%DRAMBandwidthUnavailable'))"/>
         <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
         <collectorKnob knob="restrictPCIeBandwidthByClass">0x12</collectorKnob>
         <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
        </xsl:when>
        <xsl:when test="$isPerfDRAMBWAvailable = 'true' and $isPerfIOBWAvailable = 'true'">
         <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
         <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
         <collectorKnob knob="restrictPCIeBandwidthByClass">0x12</collectorKnob>
         <collectorKnob knob="uncoreSamplingInterval">100</collectorKnob>
        </xsl:when>
       </xsl:choose>
      </xsl:otherwise>
     </xsl:choose>
    </xsl:when>
    <xsl:otherwise>
     <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="collectPCIeBandwidth">true</boolean:collectorKnob>
     <collectorKnob knob="restrictPCIeBandwidthByClass">0x12</collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
   <collectorKnob knob="pmuEventConfig">
    <xsl:value-of select="$events//events/cpi"/>
   </collectorKnob>
   <collectorKnob knob="pmuSamplingInterval">
    <xsl:value-of select="format-number(exsl:ctx('samplingInterval', 1), '#.####')"/>
   </collectorKnob>
   <collectorKnob knob="enableStackCollection">
    <xsl:value-of select="exsl:ctx('enableStackCollect', 0)"/>
   </collectorKnob>
  </collector>
 </analysis>
</bag>
